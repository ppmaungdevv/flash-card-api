# these codes are generated by chatGPT for learning purpose

import io
from flask import Flask, jsonify, send_file

app = Flask(__name__)

@app.route('/generate_audio_files', methods=['POST'])
def generate_audio_files():
    # Sample data: audio_texts and corresponding audio files (assuming you have a method to generate them)
    audio_texts = ["hello", "world", "this", "is", "a", "test"]
    
    audio_files = []

    for text in audio_texts:
        # Generate audio file for the given text (for simplicity, we use a placeholder)
        # You should replace this with actual audio generation code (like using gTTS or any other library)
        audio_bytes = generate_audio_for_text(text)  # Replace with your actual audio generation logic
        
        # Add the generated audio file to the response
        audio_files.append({
            "text": text,
            "audio": audio_bytes  # We'll send the raw bytes in the response
        })

    return jsonify({
        "audio_files": [
            {"text": audio['text'], "audio_url": f"/audio_files/{audio['text']}.mp3"}
            for audio in audio_files
        ],
        "message": "Audio files generated successfully."
    })

# Route to serve the audio files dynamically
@app.route('/audio_files/<filename>')
def download_file(filename):
    # Fetch the correct audio file data based on filename
    # You need to map the filename to the corresponding audio content dynamically
    audio_data = get_audio_data_by_filename(filename)  # Fetch audio data (bytes) based on the filename
    
    return send_file(
        io.BytesIO(audio_data),
        mimetype='audio/mpeg',
        as_attachment=True,
        download_name=filename
    )

def generate_audio_for_text(text):
    # Placeholder: Replace with actual audio generation logic
    # For example, using gTTS (Google Text-to-Speech) to generate MP3 data
    from gtts import gTTS
    import io

    tts = gTTS(text)
    audio_stream = io.BytesIO()
    tts.save(audio_stream)
    audio_stream.seek(0)
    
    return audio_stream.read()

def get_audio_data_by_filename(filename):
    # This function returns the audio data (bytes) based on the filename
    # In a real case, you would store the audio data in memory or in a cache
    text = filename.split(".")[0]  # Extract text from filename
    return generate_audio_for_text(text)

if __name__ == '__main__':
    app.run(debug=True)
